@name Chat E2 Environment [sk89q]
@outputs Data:table
@persist LongTypes:table

if (first() | duped()) {
    LongTypes = table()
    LongTypes["e", string] = "Entity"
    LongTypes["n", string] = "Normal"
    LongTypes["v", string] = "Vector"
    LongTypes["v2", string] = "Vector2"
    LongTypes["v4", string] = "Vector4"
    LongTypes["f", string] = "Function"

    runOnChat(1)
} elseif (chatClk(owner())) {
    if (lastSaid():trim():lower() == "clear") {
        print("Environment cleared!")
        Data = table()
        exit()
    } elseif (lastSaid():trim():lower() == "debug") {
        print("DATA:")
        printTable(Data)
        exit()
    }
    
    PreCode = ""
    Code = lastSaid()
    
    # Try to detect a variable being set
    # TODO: More than one variable
    M = Code:match("^([A-Z][A-Za-z0-9_]*) *[%+%-/%*%^%%]?=")
    if (!M[1, string]) { M = Code:match("^([A-Z][a-z0-9_]*) *%+%+") }
    if (!M[1, string]) { M = Code:match("^([A-Z][a-z0-9_]*) *%-%-") }
    if (!M[1, string]) { M = Code:match("^function +([A-Z][a-z0-9_]*)") }
    if (M[1, string]) {
        PreCode = "@outputs " + M[1, string] + "__G:generic\n" + PreCode
        Code = Code + "\n" + M[1, string] + "__G = generic(" + M[1, string] + ")\n"
    }
    
    # Input from previous session
    Keys = Data:keys()
    Types = Data:typeids()
    # First create inputs to bring in the environment
    for (I = 1, Keys:count()) {
        PreCode = PreCode + "@inputs " + Keys[I, string] + ":generic\n"
        if (Keys[I, string] != M[1, string] + "__G") {
            PreCode = PreCode + "@outputs " + Keys[I, string] + ":generic\n"
        }
    }
    # We need to unpack the inputs from the generics to
    # import them into the environment
    for (I = 1, Keys:count()) {
        Key = Keys[I, string]
        TypeStr = LongTypes[Data[Key, generic]:type(), string]
        if (!TypeStr) {
            print("UNKNOWN TYPE: " + Data[Key, generic]:type() + " (hint: adjust LongTypes)")
            exit()
        }
        Code = format("%s = %s:get%s()\n%s",
                      Key:sub(1, -4), Key,
                      TypeStr, Code)
    }
    
    Code = PreCode + Code
    Compiled = virtCompile(Code)
    
    if (Compiled) {
        #print("SUCCESSFUL compilation!")
        Compiled:exec(Data)
        Data = Compiled:getOutputs()
    } else {
        if (!virtCanCompile()) {
            print("ERROR: Cannot compile yet!")
            exit()
        } else {
            print("FAILED compilation: " + virtLastError() + " (hint: see console for source)")
            print(_HUD_PRINTCONSOLE,
                "-------------\n" +
                Code +
                "\n-------------")
        }
    }
}
