@name Montezuma's Wheel [sk89q]
@inputs Diameter ZRange Speed Algorithm Board Start
@outputs Mode Count Props:array Rate Eject PosDelta BasePosition:vector
@persist T OriginPos:vector TargetAngles:angle Diameter LastModeChange BaseZ

# Modes:
# 0 - Boarding
# 1 - Waiting to board
# 2 - Waiting to run
# 3 - Running
# 4 - Paused
# 5 - Boarding end warning
# 6 - Collecting to board
# 800 - Initialization

if (first() | duped()) {
    signalSetGroup("MontezumaWheel")
    runOnSignal("SetOrigin", 0, 1)
    runOnSignal("ResetOrigin", 0, 1)
    
    LastModeChange = curtime()
    Mode = 800
    Running = 1
    BaseZ = 1000
    Rate = 0.015 * Speed
    OriginPos = entity():pos()
    TargetAngles = entity():angles()
    Props = array()
    Count = 0
    Eject = 0
    
    timer("FindProps", 6000)
    print("[Montezuma's Wheel] Looking for props in 6 seconds...")
} elseif (clk("FindProps")) {
    #findIncludePlayerProps(owner())
    #findByModel("models/hunter/plates/plate1x2.mdl")
    
    SelfPos = entity():pos()
    TempProps = entity():getConstraints()
    Props = array()
    
    for (I = 1, TempProps:count()) {
        E = TempProps[I, entity]
        if (E:owner() == owner() & E:type() == "prop_physics" & 
            E:model() == "models/hunter/plates/plate1x2.mdl") {
            
            Found = 0
            for (J = 1, Props:count()) {
                if (Props[I, entity]:pos():distance(SelfPos) > E:pos():distance(SelfPos)) {
                    Props:insertEntity(J, E)
                    Found = 1
                    break
                }
            }
            if (!Found) {
                Props:pushEntity(E)
            }
            
            E:setMass(50000)
            # Hide entities
            E:setAlpha(255)
            #Cons = E:getConstraints()
            #for (J = 1, Cons:count()) {
            #    Cons[J, entity]:setAlpha(255)
            #}
            Count++
        }
    }
    
    TempProps = array()
    
    if (Props:count() == 0) {
        print("[Montezuma's Wheel] Looking for props in 3 seconds...")
        timer("FindProps", 3000)
    } else {
        print(format("[Montezuma's Wheel] Found %d props", Props:count()))
        runOnTick(1)
        timer("Ready", 1000)
    }
} elseif (clk("Ready")) {
    Mode = 0
} elseif (signalClk("MontezumaWheel", "SetOrigin", 0)) {
    gSetGroup("MontezumaWheel")
    OriginPos = gGetVec("Position")
    gDeleteVec("Position")
} elseif (signalClk("MontezumaWheel", "ResetOrigin", 0)) {
    OriginPos = entity():pos()
} elseif (~Speed) {
    Rate = 0.015 * Speed
} elseif (~Board & Board) {
    #if (Mode == 800) { exit() }
    if (Mode != 0 & Mode != 1 & Mode != 6) { # Currently not in boarding mode and
                                             # not trying to enter boarding mode
        stoptimer("EndBoarding")
        
        for (I = 1, Count) {
            # Show entities
            Props[I, entity]:setAlpha(255)
            #Cons = Props[I, entity]:getConstraints()
            #for (J = 1, Cons:count()) {
            #    Cons[J, entity]:setAlpha(255)
            #}
        }
        
        Mode = 6 # Collecting to board
        LastModeChange = curtime()
    }
} elseif (~Start & Start) {
    #if (Mode == 800) { exit() }
    if (Mode == 0 | Mode == 1 | Mode == 6) { # Currently in boarding mode or waiting to board
        timer("EndBoarding", 2000)
        
        Mode = 5 # Boarding end warning
        LastModeChange = curtime()
    }
} elseif (clk("EndBoarding")) {
    Mode = 2 # Waiting to run
    LastModeChange = curtime()
} elseif (clk("Deeject")) {
    Eject = 0
}

if (tickClk()) {
    BasePosition = OriginPos + vec(0, 0, BaseZ)
    SinceLastModeChange = curtime() - LastModeChange
    
    for (I = 1, Count) {
        E = Props[I, entity]
        
        if (Mode == 800) { # Init
            TargetPos = entity():toWorld(vec(I * 100, 0, 300))
        } elseif (Mode == 0 | Mode == 5) { # Boarding, boarding end warning
            TargetPos = entity():toWorld(vec(I * 100, 0, 3))
        } elseif (Mode == 6) { # Collecting to board
            TargetPos = entity():toWorld(vec(I * 100, 0, 300 + BaseZ))
        } elseif (Mode == 1) { # Waiting to board
            Z = -BaseZ * ((SinceLastModeChange / 5 - 1)^4 - 1)
            TargetPos = entity():toWorld(vec(I * 100, 0, 3 + BaseZ - Z))
        } elseif (Mode == 2) { # Waiting to run
            Z = BaseZ * (SinceLastModeChange / 5)^4
            TargetPos = entity():toWorld(vec(I * 100, 0, 3 + Z))
        } else { # Running
            K = (T - ((I - 1) / Count) * 60) * 6
            K2 = (T/10 - ((I - 1) / Count) * 60) * 6
            K3 = (T - ((I - 1) / Count) * 60) * 16
            if (Algorithm == 1) {
                TargetPos = OriginPos + vec(Diameter / 2 * sin(K2),
                                            Diameter / 2 * cos(K2),
                                            ZRange / 2 * -cos(K) + ZRange / 2 + 200)
                            + vec(0, 0, BaseZ)
            } elseif (Algorithm == 2) {
                EffectiveDiameter = Diameter * abs(sin(K3)) / 1 * (Diameter - 100) + 100
                TargetPos = OriginPos + vec(EffectiveDiameter / 2 * cos(K2 + sin(K2)),
                                            EffectiveDiameter / 2 * sin(K2),
                                            ZRange / 2 * -cos(K) + ZRange / 2 + 200)
                            + vec(0, 0, BaseZ)
            } else {
                TargetPos = OriginPos + vec(Diameter / 2 * sin(K),
                                            Diameter / 2 * cos(K),
                                            ZRange / 2 * -cos(K2) + floor(cos(K))*10 + sin(K * 4) + ZRange / 2 + 200)
                            + vec(0, 0, BaseZ)
            }
        }
        E:applyForce((TargetPos - E:pos() - E:vel() * 0.015) * E:mass() * 30)
        
        PosDelta = TargetPos:distance(E:pos())
        
        if (PosDelta > 50) {
            AngForce = (TargetAngles - E:angles() - E:angVel() * 0.100) * shiftL(E:inertia()):length() * 40
            E:applyAngForce(AngForce)
        } else {
            # Fizyk's
            TarQ = quat(Mode == 3 ? TargetAngles:setYaw((TargetPos - OriginPos):toAngle():yaw()) : TargetAngles)
            CurQ = quat(E:angles())
            Q = TarQ/CurQ
            VF = E:toLocal(rotationVector(Q)+E:pos())
            E:applyTorque((150*VF-5*E:angVelVector())*E:inertia()) 
        }
    }
    
    # Do we need to switch modes?
    if (Mode == 6 & SinceLastModeChange > 2) {
        Mode = 1
        
        LastModeChange = curtime()
    } elseif ((Mode == 1 | Mode == 2) & SinceLastModeChange > 5) {
        if (Mode == 1) {
            Mode = 0
            Eject = 1
            timer("Deeject", 0)
        } elseif (Mode == 2) {
            Mode = 3
            
            for (I = 1, Count) {
                # Hide entities
                Props[I, entity]:setAlpha(10)
                #Cons = Props[I, entity]:getConstraints()
                #for (J = 1, Cons:count()) {
                #    Cons[J, entity]:setAlpha(0)
                #}
            }
        }
        
        LastModeChange = curtime()
    }
        
    if (Mode != 4) {
        T += Rate
    }
}